DROP TABLE IF EXISTS MARKS, FILM_GENRE, FRIENDSHIP, GENRES, FILMS, MPA, USERS, DIRECTORS, FILM_DIRECTOR,
    EVENTS, REVIEWS, REVIEW_RATED;

CREATE TABLE IF NOT EXISTS USERS
(
    USER_ID       INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    USER_NAME     VARCHAR NOT NULL,
    USER_LOGIN    VARCHAR NOT NULL,
    USER_EMAIL    VARCHAR NOT NULL,
    USER_BIRTHDAY DATE    NOT NULL
);

CREATE TABLE IF NOT EXISTS MPA
(
    MPA_ID          INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    MPA_NAME        VARCHAR NOT NULL,
    MPA_DESCRIPTION VARCHAR NOT NULL
);

CREATE TABLE IF NOT EXISTS FILMS
(
    FILM_ID           INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    FILM_NAME         VARCHAR      NOT NULL,
    FILM_DESCRIPTION  VARCHAR(200) NOT NULL,
    FILM_DURATION     INTEGER      NOT NULL,
    FILM_RELEASE_DATE DATE         NOT NULL,
    FILM_MPA_ID       INTEGER,
    FILM_RATING       DECFLOAT(10),
    FILM_RATING_COUNT INTEGER DEFAULT 0,

    FOREIGN KEY (FILM_MPA_ID) REFERENCES MPA (MPA_ID)
);

CREATE TABLE IF NOT EXISTS GENRES
(
    GENRE_ID   INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    GENRE_NAME VARCHAR NOT NULL
);

CREATE TABLE IF NOT EXISTS FRIENDSHIP
(
    FRIENDSHIP_USER_ID   INTEGER,
    FRIENDSHIP_FRIEND_ID INTEGER,
    FRIENDSHIP_STATUS    VARCHAR NOT NULL,

    PRIMARY KEY (FRIENDSHIP_USER_ID, FRIENDSHIP_FRIEND_ID),
    FOREIGN KEY (FRIENDSHIP_USER_ID) REFERENCES USERS (USER_ID) ON DELETE CASCADE,
    FOREIGN KEY (FRIENDSHIP_FRIEND_ID) REFERENCES USERS (USER_ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS MARKS
(
    MARK_FILM_ID INTEGER,
    MARK_USER_ID INTEGER,
    MARK_RATING  INTEGER,

    PRIMARY KEY (MARK_FILM_ID, MARK_USER_ID),
    FOREIGN KEY (MARK_FILM_ID) REFERENCES FILMS (FILM_ID) ON DELETE CASCADE,
    FOREIGN KEY (MARK_USER_ID) REFERENCES USERS (USER_ID)
);

CREATE TABLE IF NOT EXISTS FILM_GENRE
(
    FILM_GENRE_FILM_ID  INTEGER NOT NULL,
    FILM_GENRE_GENRE_ID INTEGER NOT NULL,

    PRIMARY KEY (FILM_GENRE_FILM_ID, FILM_GENRE_GENRE_ID),
    FOREIGN KEY (FILM_GENRE_FILM_ID) REFERENCES FILMS (FILM_ID) ON DELETE CASCADE,
    FOREIGN KEY (FILM_GENRE_GENRE_ID) REFERENCES GENRES (GENRE_ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS DIRECTORS
(
    DIRECTOR_ID   INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    DIRECTOR_NAME VARCHAR NOT NULL
);

CREATE TABLE IF NOT EXISTS FILM_DIRECTOR
(
    FILM_DIRECTOR_FILM_ID     INTEGER,
    FILM_DIRECTOR_DIRECTOR_ID INTEGER,

    PRIMARY KEY (FILM_DIRECTOR_FILM_ID, FILM_DIRECTOR_DIRECTOR_ID),
    FOREIGN KEY (FILM_DIRECTOR_FILM_ID) REFERENCES FILMS (FILM_ID) ON DELETE CASCADE,
    FOREIGN KEY (FILM_DIRECTOR_DIRECTOR_ID) REFERENCES DIRECTORS (DIRECTOR_ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS EVENTS
(
    EVENT_ID        INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    EVENT_USER_ID   INTEGER NOT NULL,
    EVENT_ENTITY_ID INTEGER NOT NULL,
    EVENT_TIMESTAMP BIGINT  NOT NULL,
    EVENT_TYPE      VARCHAR NOT NULL,
    EVENT_OPERATION VARCHAR NOT NULL,

    FOREIGN KEY (EVENT_USER_ID) REFERENCES USERS (USER_ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS REVIEWS
(
    REVIEW_ID          INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    REVIEW_CONTENT     VARCHAR NOT NULL,
    REVIEW_IS_POSITIVE BOOLEAN NOT NULL,
    REVIEW_USER_ID     INTEGER,
    REVIEW_FILM_ID     INTEGER,
    REVIEW_RATING      INTEGER DEFAULT 0,

    FOREIGN KEY (REVIEW_USER_ID) REFERENCES USERS (USER_ID) ON DELETE CASCADE,
    FOREIGN KEY (REVIEW_FILM_ID) REFERENCES FILMS (FILM_ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS REVIEW_RATED
(
    REVIEW_RATED_REVIEW_ID INTEGER,
    REVIEW_RATED_USER_ID   INTEGER,
    REVIEW_RATED_RATED     INTEGER NOT NULL,

    PRIMARY KEY (REVIEW_RATED_REVIEW_ID, REVIEW_RATED_USER_ID),
    FOREIGN KEY (REVIEW_RATED_REVIEW_ID) REFERENCES REVIEWS (REVIEW_ID) ON DELETE CASCADE,
    FOREIGN KEY (REVIEW_RATED_USER_ID) REFERENCES USERS (USER_ID) ON DELETE CASCADE
);
